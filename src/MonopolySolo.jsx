import React, { useEffect, useMemo, useState, useCallback } from "react";

// ====== D·ªÆ LI·ªÜU B√ÄN C·ªú ======
const SIZE = 6; // l∆∞·ªõi 6x6 -> 20 √¥ vi·ªÅn
const TILES = [
  { type: "start", name: "Xu·∫•t ph√°t" }, // 0
  { type: "property", name: "Ph·ªë A", price: 120, rent: 35, color: "#ef4444" },
  { type: "chance", name: "C∆° h·ªôi" }, // 2
  { type: "property", name: "Ph·ªë B", price: 140, rent: 40, color: "#f97316" },
  { type: "tax", name: "Thu·∫ø $100", amount: 100 },
  { type: "property", name: "Ph·ªë C", price: 160, rent: 45, color: "#f59e0b" },
  { type: "chance", name: "C∆° h·ªôi" }, // 6
  { type: "property", name: "Ph·ªë D", price: 180, rent: 50, color: "#10b981" },
  { type: "jail", name: "Nh√† t√π (m·∫•t 1 l∆∞·ª£t)" },
  { type: "property", name: "Ph·ªë E", price: 200, rent: 60, color: "#14b8a6" },
  { type: "chance", name: "C∆° h·ªôi" },
  { type: "property", name: "Ph·ªë F", price: 220, rent: 70, color: "#06b6d4" },
  { type: "tax", name: "Thu·∫ø $100", amount: 100 },
  { type: "property", name: "Ph·ªë G", price: 240, rent: 80, color: "#60a5fa" },
  { type: "chance", name: "C∆° h·ªôi" },
  { type: "property", name: "Ph·ªë H", price: 260, rent: 90, color: "#818cf8" },
  { type: "free", name: "B√£i ƒë·ªó mi·ªÖn ph√≠" },
  { type: "property", name: "Ph·ªë I", price: 280, rent: 100, color: "#a78bfa" },
  { type: "chance", name: "C∆° h·ªôi" },
  { type: "property", name: "Ph·ªë J", price: 300, rent: 110, color: "#f472b6" },
];

const CHANCE = [
  {
    text: "Nh·∫≠n th∆∞·ªüng d·ª± √°n +$200",
    do: (s) => ({
      ...s,
      money: s.money + 200,
      log: ["B·∫°n nh·∫≠n +$200.", ...s.log],
    }),
  },
  {
    text: "ƒê√≥ng ph·∫°t giao th√¥ng -$150",
    do: (s) => ({
      ...s,
      money: s.money - 150,
      log: ["B·∫°n m·∫•t -$150.", ...s.log],
    }),
  },
  { text: "Ti·∫øn l√™n 3 √¥", do: (s, helpers) => helpers.moveBy(3, true) },
  { text: "L√πi 2 √¥", do: (s, helpers) => helpers.moveBy(-2, true) },
  {
    text: "V·ªÅ Xu·∫•t ph√°t v√† nh·∫≠n +$200",
    do: (s, helpers) => helpers.goTo(0, true),
  },
  { text: "V√†o Nh√† t√π (m·∫•t 1 l∆∞·ª£t)", do: (s, helpers) => helpers.goToJail() },
];

const DEFAULT = {
  pos: 0,
  money: 1500,
  turn: 0,
  laps: 0,
  owned: {},
  skip: 0,
  canRoll: true,
  pendingBuy: null,
  lastRoll: null,
  bankrupt: false,
  action: "S·∫µn s√†ng! Quay ƒë·ªÉ b·∫Øt ƒë·∫ßu.",
  log: [],
};
const KEY = "co-ty-phu-mini-react-v1";

function useLocalState() {
  const [state, setState] = useState(() => {
    try {
      const v = localStorage.getItem(KEY);
      return v ? JSON.parse(v) : DEFAULT;
    } catch {
      return DEFAULT;
    }
  });
  useEffect(() => {
    try {
      localStorage.setItem(KEY, JSON.stringify(state));
    } catch {}
  }, [state]);
  return [state, setState];
}

function indexToCoord(i) {
  const s = SIZE; // 6
  if (i < s) return { row: 1, col: i + 1 }; // h√†ng tr√™n
  if (i < s + (s - 1)) {
    const k = i - s;
    return { row: k + 2, col: s };
  }
  if (i < s + (s - 1) + (s - 1)) {
    const k = i - (s + (s - 1));
    return { row: s, col: s - 1 - k };
  }
  const k = i - (s + (s - 1) + (s - 1));
  return { row: s - 1 - k, col: 1 };
}

export default function MonopolySolo() {
  const [state, setState] = useLocalState();

  const helpers = useMemo(
    () => ({
      moveBy: (steps, fromCard = false) => {
        setState((prev) => {
          const N = TILES.length;
          let old = prev.pos;
          let next = (old + steps) % N;
          if (next < 0) next += N;
          let laps = prev.laps;
          let money = prev.money;
          if (steps > 0 && old + steps >= N) {
            laps++;
            money += 200;
          }
          const newState = { ...prev, pos: next, laps, money };
          return handleLanding(newState, fromCard);
        });
      },
      goTo: (idx, rewardStart = false) => {
        setState((prev) => {
          let money = prev.money;
          let laps = prev.laps;
          if (rewardStart && idx === 0) {
            laps++;
            money += 200;
          }
          const newState = { ...prev, pos: idx, money, laps };
          return handleLanding(newState, true);
        });
      },
      goToJail: () => {
        setState((prev) => {
          const s = { ...prev, pos: 8, skip: 1 };
          return {
            ...s,
            action: "B·∫°n v√†o Nh√† t√π v√† m·∫•t 1 l∆∞·ª£t.",
            log: ["B·∫°n v√†o Nh√† t√π v√† m·∫•t 1 l∆∞·ª£t.", ...s.log],
          };
        });
      },
    }),
    []
  );

  const handleLanding = useCallback(
    (s, fromCard = false) => {
      const tile = TILES[s.pos];
      let next = { ...s };
      switch (tile.type) {
        case "start":
          next.action = "B·∫°n ƒëang ·ªü √¥ Xu·∫•t ph√°t.";
          break;
        case "property":
          if (next.owned[s.pos]) {
            next.action = `B·∫°n ƒë√£ s·ªü h·ªØu ${tile.name}.`;
          } else {
            next.pendingBuy = s.pos;
            next.action = `${tile.name}: Gi√° $${tile.price}, thu√™ $${tile.rent}. Mua ch·ª©?`;
          }
          break;
        case "chance": {
          const card = CHANCE[Math.floor(Math.random() * CHANCE.length)];
          next.action = `C∆° h·ªôi: ${card.text}`;
          next.log = [`C∆° h·ªôi: ${card.text}`, ...next.log];
          // th·∫ª c√≥ th·ªÉ tr·∫£ state m·ªõi ho·∫∑c g·ªçi helpers
          const result = card.do;
          if (result.length === 2) {
            // c√≥ helpers
            setTimeout(() => result(next, helpers), 0);
          } else {
            next = result(next);
          }
          break;
        }
        case "tax":
          next.money -= tile.amount || 100;
          next.action = `B·∫°n n·ªôp thu·∫ø $${tile.amount || 100}.`;
          next.log = [`Thu·∫ø -$${tile.amount || 100}`, ...next.log];
          break;
        case "jail":
          next.skip = 1;
          next.action = "B·∫°n v√†o Nh√† t√π: m·∫•t 1 l∆∞·ª£t.";
          next.log = ["M·∫•t 1 l∆∞·ª£t.", ...next.log];
          break;
        case "free":
          next.action = "B√£i ƒë·ªó mi·ªÖn ph√≠: kh√¥ng c√≥ s·ª± ki·ªán.";
          break;
      }
      if (next.money < 0) {
        next.bankrupt = true;
        next.canRoll = false;
        next.action = "B·∫°n ƒë√£ ph√° s·∫£n! B·∫•m 'Ch∆°i m·ªõi' ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.";
        next.log = ["üí• Ph√° s·∫£n.", ...next.log];
      }
      return next;
    },
    [helpers]
  );

  const roll = useCallback(() => {
    setState((prev) => {
      if (!prev.canRoll || prev.bankrupt) return prev;
      if (prev.skip > 0) {
        return {
          ...prev,
          skip: prev.skip - 1,
          turn: prev.turn + 1,
          lastRoll: "‚Äî",
          action: "B·ªè l∆∞·ª£t do ƒëang ·ªü Nh√† t√π.",
          log: ["B·ªã gi·ªØ, b·ªè l∆∞·ª£t.", ...prev.log],
        };
      }
      const n = Math.floor(Math.random() * 6) + 1;
      const after = { ...prev, lastRoll: n, canRoll: false };
      // di chuy·ªÉn ·ªü tick k·∫ø ti·∫øp ƒë·ªÉ UI m∆∞·ª£t
      setTimeout(() => helpers.moveBy(n), 200);
      return { ...after, turn: after.turn + 1, canRoll: true };
    });
  }, [helpers]);

  const attemptBuy = () => {
    setState((s) => {
      const idx = s.pendingBuy;
      if (idx == null) return s;
      const t = TILES[idx];
      if (s.money >= t.price) {
        const money = s.money - t.price;
        const owned = { ...s.owned, [idx]: true };
        return {
          ...s,
          money,
          owned,
          pendingBuy: null,
          action: `ƒê√£ mua ${t.name}.`,
          log: [`Mua ${t.name} v·ªõi $${t.price}.`, ...s.log],
        };
      } else {
        return {
          ...s,
          action: "Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua.",
          log: ["Mua th·∫•t b·∫°i: thi·∫øu ti·ªÅn.", ...s.log],
        };
      }
    });
  };

  const skipBuy = () => {
    setState((s) => {
      const idx = s.pendingBuy;
      if (idx == null) return s;
      const t = TILES[idx];
      const money = s.money - t.rent;
      let next = {
        ...s,
        money,
        pendingBuy: null,
        action: `B·∫°n b·ªè qua. Tr·ª´ $${t.rent}.`,
        log: [`Kh√¥ng mua ${t.name} ‚Üí tr·∫£ ti·ªÅn thu√™ $${t.rent}.`, ...s.log],
      };
      if (next.money < 0) {
        next.bankrupt = true;
        next.canRoll = false;
        next.log = ["üí• Ph√° s·∫£n.", ...next.log];
        next.action = "B·∫°n ƒë√£ ph√° s·∫£n!";
      }
      return next;
    });
  };

  const reset = () => setState(DEFAULT);
  const save = () => {
    try {
      localStorage.setItem(KEY, JSON.stringify(state));
    } catch {}
  };
  const load = () => {
    try {
      const v = localStorage.getItem(KEY);
      if (v) setState(JSON.parse(v));
    } catch {}
  };

  useEffect(() => {
    const onKey = (e) => {
      if (e.code === "Space") {
        e.preventDefault();
        roll();
      }
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [roll]);

  // d·ª±ng l∆∞·ªõi 6x6
  const grid = useMemo(() => {
    const cells = new Array(SIZE * SIZE)
      .fill(null)
      .map((_, i) => ({ i, tile: null }));
    TILES.forEach((t, idx) => {
      const { row, col } = indexToCoord(idx);
      const index = (row - 1) * SIZE + (col - 1);
      cells[index] = { i: index, tile: { ...t, idx } };
    });
    return cells;
  }, []);

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-[#0b1220] to-slate-900 text-slate-100 flex items-center justify-center p-6">
      <div className="grid gap-5 w-full max-w-[1200px] md:grid-cols-[1.1fr_0.9fr]">
        {/* Board */}
        <div className="rounded-2xl bg-slate-900/90 border border-slate-600/20 p-4 shadow-xl">
          <div className="flex items-center gap-2 font-bold mb-3">
            <span>üé≤</span>
            <span>C·ªù T·ª∑ Ph√∫ Mini ¬∑ Solo (React)</span>
          </div>
          <div
            className="mx-auto grid gap-1"
            style={{
              width: "min(92vw,680px)",
              height: "min(92vw,680px)",
              gridTemplateColumns: `repeat(${SIZE},minmax(0,1fr))`,
              gridTemplateRows: `repeat(${SIZE},minmax(0,1fr))`,
            }}
          >
            {grid.map((cell) => {
              const t = cell.tile;
              const isCurrent = t && t.idx === state.pos;
              const owned = t && state.owned[t.idx];
              return (
                <div
                  key={cell.i}
                  className={`relative rounded-xl border ${
                    t
                      ? "bg-slate-900/80 border-slate-600/30"
                      : "bg-transparent border-transparent"
                  } overflow-hidden`}
                  style={{
                    outline: t
                      ? t.type === "property"
                        ? owned
                          ? "2px solid rgba(34,211,238,.8)"
                          : "1px solid rgba(148,163,184,.25)"
                        : "1px dashed rgba(148,163,184,.35)"
                      : "none",
                  }}
                >
                  {t && (
                    <div className="flex flex-col justify-between h-full p-2 text-xs">
                      <div className="flex items-center justify-between gap-2">
                        <span className="text-[10px] text-slate-400">
                          #{t.idx}
                        </span>
                        <span className="leading-tight">{t.name}</span>
                      </div>
                      <div
                        className="h-1.5 rounded-full"
                        style={{
                          background:
                            t.type === "property"
                              ? t.color
                              : "rgba(148,163,184,.15)",
                        }}
                      />
                      <div className="opacity-80">
                        {t.type === "property"
                          ? `$${t.price} ¬∑ thu√™ $${t.rent}`
                          : ""}
                      </div>
                      {isCurrent && (
                        <div className="absolute bottom-1.5 right-1.5 w-4 h-4 rounded-full bg-cyan-400 shadow-[0_0_14px_rgba(34,211,238,.7)]" />
                      )}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
          <p className="text-slate-400 text-sm mt-2">
            M·∫πo: Nh·∫•n <b>Space</b> ƒë·ªÉ quay x√∫c x·∫Øc. Game t·ª± l∆∞u v√†o tr√¨nh duy·ªát.
          </p>
        </div>

        {/* Control panel */}
        <div className="rounded-2xl bg-slate-900/90 border border-slate-600/20 p-4 shadow-xl">
          <div className="font-bold mb-2">B·∫£ng ƒëi·ªÅu khi·ªÉn</div>
          <div className="flex flex-wrap gap-2 text-sm text-slate-300 mb-2">
            <span className="px-2 py-1 rounded-full bg-slate-600/20">
              X√∫c x·∫Øc: <b className="ml-1">{state.lastRoll ?? "‚Äî"}</b>
            </span>
            <span className="px-2 py-1 rounded-full bg-slate-600/20">
              B·ªè l∆∞·ª£t c√≤n: <b className="ml-1">{state.skip}</b>
            </span>
            <span className="px-2 py-1 rounded-full bg-slate-600/20">
              S·ªü h·ªØu: <b className="ml-1">{Object.keys(state.owned).length}</b>{" "}
              √¥
            </span>
          </div>
          <div className="flex flex-wrap gap-2 my-2">
            <button
              onClick={roll}
              disabled={!state.canRoll || state.bankrupt}
              className="px-4 py-2 rounded-xl font-semibold bg-cyan-400 text-slate-900 shadow"
            >
              Quay x√∫c x·∫Øc
            </button>
            {state.pendingBuy != null && (
              <>
                <button
                  onClick={attemptBuy}
                  className="px-4 py-2 rounded-xl font-semibold bg-slate-300 text-slate-900"
                >
                  Mua √¥
                </button>
                <button
                  onClick={skipBuy}
                  className="px-4 py-2 rounded-xl font-semibold border border-slate-600/40 text-slate-100"
                >
                  B·ªè qua
                </button>
              </>
            )}
            <button
              onClick={reset}
              className="px-4 py-2 rounded-xl font-semibold border border-slate-600/40 text-slate-100"
            >
              Ch∆°i m·ªõi
            </button>
            <button
              onClick={save}
              className="px-4 py-2 rounded-xl font-semibold border border-slate-600/40 text-slate-100"
            >
              L∆∞u
            </button>
            <button
              onClick={load}
              className="px-4 py-2 rounded-xl font-semibold border border-slate-600/40 text-slate-100"
            >
              Kh√¥i ph·ª•c
            </button>
          </div>
          <div className="grid grid-cols-2 gap-2 text-sm my-3">
            <div className="rounded-xl bg-slate-800/50 border border-slate-600/30 p-3">
              Ti·ªÅn:{" "}
              <span
                className={`font-bold ${
                  state.money < 0 ? "text-rose-400" : "text-emerald-400"
                }`}
              >
                ${state.money}
              </span>
            </div>
            <div className="rounded-xl bg-slate-800/50 border border-slate-600/30 p-3">
              L∆∞·ª£t ƒëi: <b>{state.turn}</b>
            </div>
            <div className="rounded-xl bg-slate-800/50 border border-slate-600/30 p-3">
              V√≤ng: <b>{state.laps}</b>
            </div>
            <div className="rounded-xl bg-slate-800/50 border border-slate-600/30 p-3">
              √î hi·ªán t·∫°i:{" "}
              <b>
                {TILES[state.pos].name} (#{state.pos})
              </b>
            </div>
          </div>
          <div className="rounded-xl border border-dashed border-slate-600/40 p-3 text-sm">
            {state.action}
          </div>
          <div className="h-64 overflow-auto rounded-xl mt-3 p-3 bg-slate-950/60 border border-slate-600/20 text-sm text-slate-300">
            {state.log.length === 0 ? (
              <p>Log tr·ªëng.</p>
            ) : (
              state.log.map((l, i) => (
                <p key={i} className="mb-1">
                  {l}
                </p>
              ))
            )}
          </div>
          <details className="mt-3 text-sm text-slate-300">
            <summary>Lu·∫≠t ch∆°i (r√∫t g·ªçn)</summary>
            <ul className="list-disc pl-5 space-y-1 mt-2">
              <li>
                ƒêi 1 x√∫c x·∫Øc (1‚Äì6). Qua √¥ <b>Xu·∫•t ph√°t</b> nh·∫≠n <b>+$200</b>.
              </li>
              <li>
                √î <b>BƒêS</b>: n·∫øu ch∆∞a s·ªü h·ªØu c√≥ th·ªÉ <b>mua</b>. N·∫øu b·ªè qua s·∫Ω
                tr·∫£ <b>ti·ªÅn thu√™</b> cho ng√¢n h√†ng.
              </li>
              <li>
                √î <b>C∆° h·ªôi</b>: r√∫t th·∫ª ng·∫´u nhi√™n c√≥ th·ªÉ +/‚àí ti·ªÅn, di chuy·ªÉn,
                ho·∫∑c v√†o Nh√† t√π.
              </li>
              <li>
                √î <b>Thu·∫ø</b>: tr·∫£ <b>$100</b>. √î <b>Nh√† t√π</b>: b·ªã gi·ªØ{" "}
                <b>1 l∆∞·ª£t</b>.
              </li>
              <li>
                Ph√° s·∫£n khi ti·ªÅn &lt; 0. B·∫°n ƒëang ch∆°i solo ‚Äî m·ª•c ti√™u l√† ƒëi
                c√†ng l√¢u c√†ng t·ªët!
              </li>
            </ul>
          </details>
        </div>
      </div>
    </div>
  );
}
